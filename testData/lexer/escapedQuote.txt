package ('package')
GO_WHITESPACE (' ')
identifier ('newmath')
<NL> ('')
GO_WS_NEW_LINES ('\n\n')
import ('import')
GO_WHITESPACE (' ')
string ('"testing"')
<NL> ('')
GO_WS_NEW_LINES ('\n\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
char (''\a'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
char (''\\'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
BAD_CHARACTER (''\'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
BAD_CHARACTER (''')
BAD_CHARACTER ('\')
GO_WS_NEW_LINES ('\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
char (''\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
char (''\n')
<NL> ('')
GO_WS_NEW_LINES ('\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
char (''n')
<NL> ('')
GO_WS_NEW_LINES ('\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
string ('"\n')
<NL> ('')
GO_WS_NEW_LINES ('\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
string ('"')
BAD_CHARACTER ('\')
GO_WS_NEW_LINES ('\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
string ('"\n')
<NL> ('')
GO_WS_NEW_LINES ('\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
string ('"n')
<NL> ('')
GO_WS_NEW_LINES ('\n')
const ('const')
GO_WHITESPACE (' ')
identifier ('c')
GO_WHITESPACE (' ')
= ('=')
GO_WHITESPACE (' ')
string ('"')
<NL> ('')
GO_WS_NEW_LINES ('\n\n')
char (''a'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''ä'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''本'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''\t'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''\000'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''\007'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''\377'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''\x07'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''\xff'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''\u12e4'')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''\U00101234'')
<NL> ('')
GO_WS_NEW_LINES ('\n\n')
char (''\''')
GO_WHITESPACE ('         ')
GO_LINE_COMMENT ('// rune literal containing single quote character')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''a')
identifier ('a')
char ('' ')
GO_WHITESPACE ('        ')
GO_LINE_COMMENT ('// illegal: too many characters')
<NL> ('')
GO_WS_NEW_LINES ('\n')
BAD_CHARACTER (''')
BAD_CHARACTER ('\')
identifier ('xa')
char ('' ')
GO_WHITESPACE ('       ')
GO_LINE_COMMENT ('// illegal: too few hexadecimal digits')
<NL> ('')
GO_WS_NEW_LINES ('\n')
BAD_CHARACTER (''')
BAD_CHARACTER ('\')
int ('0')
char ('' ')
GO_WHITESPACE ('        ')
GO_LINE_COMMENT ('// illegal: too few octal digits')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''\uDFFF'')
GO_WHITESPACE ('     ')
GO_LINE_COMMENT ('// illegal: surrogate half')
<NL> ('')
GO_WS_NEW_LINES ('\n')
char (''\U00110000'')
GO_WHITESPACE (' ')
GO_LINE_COMMENT ('// illegal: invalid Unicode code point')